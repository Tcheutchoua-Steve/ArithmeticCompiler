/* This file was generated by SableCC (http://www.sablecc.org/). */

package fet.compiler.analysis;

import java.util.*;
import fet.compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPS().apply(this);
        outStart(node);
    }

    public void inAAxiomS(AAxiomS node)
    {
        defaultIn(node);
    }

    public void outAAxiomS(AAxiomS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAxiomS(AAxiomS node)
    {
        inAAxiomS(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAAxiomS(node);
    }

    public void inAIdS(AIdS node)
    {
        defaultIn(node);
    }

    public void outAIdS(AIdS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdS(AIdS node)
    {
        inAIdS(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdS(node);
    }

    public void inALL(ALL node)
    {
        defaultIn(node);
    }

    public void outALL(ALL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALL(ALL node)
    {
        inALL(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outALL(node);
    }

    public void inASL(ASL node)
    {
        defaultIn(node);
    }

    public void outASL(ASL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASL(ASL node)
    {
        inASL(node);
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        outASL(node);
    }
}
