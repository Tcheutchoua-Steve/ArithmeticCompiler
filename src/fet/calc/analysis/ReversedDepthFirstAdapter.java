/* This file was generated by SableCC (http://www.sablecc.org/). */

package fet.calc.analysis;

import java.util.*;
import fet.calc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExpre().apply(this);
        outStart(node);
    }

    public void inATermExpre(ATermExpre node)
    {
        defaultIn(node);
    }

    public void outATermExpre(ATermExpre node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpre(ATermExpre node)
    {
        inATermExpre(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpre(node);
    }

    public void inAPlusExpre(APlusExpre node)
    {
        defaultIn(node);
    }

    public void outAPlusExpre(APlusExpre node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpre(APlusExpre node)
    {
        inAPlusExpre(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpre() != null)
        {
            node.getExpre().apply(this);
        }
        outAPlusExpre(node);
    }

    public void inAMinusExpre(AMinusExpre node)
    {
        defaultIn(node);
    }

    public void outAMinusExpre(AMinusExpre node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpre(AMinusExpre node)
    {
        inAMinusExpre(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpre() != null)
        {
            node.getExpre().apply(this);
        }
        outAMinusExpre(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivTerm(node);
    }

    public void inANumberFactor(ANumberFactor node)
    {
        defaultIn(node);
    }

    public void outANumberFactor(ANumberFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberFactor(ANumberFactor node)
    {
        inANumberFactor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberFactor(node);
    }

    public void inAIdFactor(AIdFactor node)
    {
        defaultIn(node);
    }

    public void outAIdFactor(AIdFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFactor(AIdFactor node)
    {
        inAIdFactor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdFactor(node);
    }

    public void inAExpreFactor(AExpreFactor node)
    {
        defaultIn(node);
    }

    public void outAExpreFactor(AExpreFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpreFactor(AExpreFactor node)
    {
        inAExpreFactor(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpre() != null)
        {
            node.getExpre().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAExpreFactor(node);
    }
}
